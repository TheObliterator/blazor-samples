@using System.Text.RegularExpressions;
@using ej2_blazor_samples
@using Syncfusion.EJ2.Blazor.Navigations;
@using Microsoft.AspNetCore.Components;
@inject IJSRuntime JsRuntime;


<div class='sb-source-section'>
    <EjsTab ID='sb-source-tab' Items="@sourceCodeItems" HeaderPlacement="@HeaderPosition.Bottom" @ref="sourceTab">
        <TabEvents Selected="OnSourceClicked"></TabEvents>
    </EjsTab>
</div>


@code {


    public List<TabItem> sourceCodeItems;
    EjsTab sourceTab;

    protected void OnSourceClicked(Syncfusion.EJ2.Blazor.Navigations.SelectEventArgs arg)
    {
        string response = string.Empty;
        SampleBrowser.CurrentControl.ForEach((control) =>
        {
            if (control.Name == SampleBrowser.CurrentSampleName)
            {
                if (control.SourceFiles.Count != 0)
                {
                    int index = (int)arg.SelectedIndex;
                    response = System.IO.File.ReadAllText("./wwwroot/scripts/Pages/" + control.Directory + "/" + control.SourceFiles[index].FileName + ".txt");
                    response = this.FormatSourceCode(response);
                    JsRuntime.InvokeAsync<Object>("refreshTab", response, control.SourceFiles[index].FileName);
                }
            }
        });
        
    }

    public string[] sourceResponse { get; set; } = new string[5];

    protected string RemoveString(string comments)
    {
        var StartTag = "@*Hidden:Lines*@";
        int StartIndex = comments.IndexOf(StartTag);
        if (StartIndex > 0)
        {
            var EndTag = "@*End:Hidden*@";
            int EndIndex = comments.IndexOf("@*End:Hidden*@") + EndTag.Length;
            string Content = comments.Substring(StartIndex, EndIndex - StartIndex);
            return comments.Replace(Content, "");
        }
        else
        {
            return comments;
        }
    }

    public string FormatSourceCode (string response)
    {
        response = response.Replace("<", "&lt;");
        response = response.Replace(">", "&gt;");
        while (response.IndexOf("@*Hidden:Lines*@") > -1)
        {
            response = RemoveString(response);
        }
        response = Regex.Replace(response, @"^(?:[\t ]*(?:\r?\n|\r))+", string.Empty, RegexOptions.Multiline);

        return response;
    }

    public void OnSourceTabSelected(Syncfusion.EJ2.Blazor.Navigations.SelectEventArgs arg)
    {
        sourceCodeItems = new List<TabItem>();
        if (arg.SelectedIndex == 1)
        {
            SampleBrowser.CurrentControl.ForEach((control) =>
            {
                if (control.Name == SampleBrowser.CurrentSampleName)
                {
                    if (control.SourceFiles.Count != 0) {
                        string Response = System.IO.File.ReadAllText("./wwwroot/scripts/Pages/" + control.Directory + "/" + control.SourceFiles[0].FileName + ".txt");
                        for (var i = 0; i < control.SourceFiles.Count; i++) {
                            sourceCodeItems.Add (
                                new TabItem() { Header = new TabHeader() { Text = control.SourceFiles[i].FileName },
                                    ContentTemplate = @<pre class='sb-src-code'><code></code></pre>
                                 }
                            );}
                        
                        Response = this.FormatSourceCode(Response);
                        this.StateHasChanged();
                        JsRuntime.InvokeAsync<Object>("refreshTab", Response, control.SourceFiles[0].FileName );
                    } else {
                        String Response = System.IO.File.ReadAllText("./wwwroot/scripts/Pages/" + control.Directory + "/" + control.FileName + ".txt");
                        Response = Response.Replace("<", "&lt;");
                        Response = Response.Replace(">", "&gt;");
                        while (Response.IndexOf("@*Hidden:Lines*@") > -1)
                        {
                            Response = RemoveString(Response);
                        }
                        Response = Regex.Replace(Response, @"^(?:[\t ]*(?:\r?\n|\r))+", string.Empty, RegexOptions.Multiline);
                        sourceCodeItems = new List<TabItem>() {
                            new TabItem() { Header = new TabHeader() { Text = control.FileName },  
                            ContentTemplate = @<pre id='code' class='sb-src-code'><code></code></pre>
                            }
                        };
                        this.StateHasChanged();
                        JsRuntime.InvokeAsync<Object>("refreshTab", Response, control.FileName);
                    }
                }
            });
        }
    }

}