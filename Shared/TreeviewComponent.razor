@using ej2_blazor_samples
@using ej2_blazor_samples.Shared
@using Newtonsoft.Json
@using Syncfusion.EJ2.Blazor.Lists
@using Syncfusion.EJ2.Blazor.Navigations
@using System.Reflection
@using Microsoft.AspNetCore.Components

@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@inject IJSRuntime JsRuntime;




<EjsTreeView ID="components-tree" Fields="@DataSource" CssClass="@treeviewClass" FullRowSelect="true" ExpandOn="@ExpandOnSettings.Click" @ref="ComponentsTree" TValue="SampleListType">
    <TreeViewEvents NodeSelected="OnNodeClick" TValue="SampleListType"></TreeViewEvents>
    @*<TreeViewTemplates>
            <NodeTemplate>
                <div>
                    <span class="tree-text">@((context as SampleListType).Name)</span>
                    @if ((context as SampleListType).Type != SampleType.None)
                    {
                        <span class="e-badge sb-badge e-samplestatus @((context as SampleListType).Type) tree tree-badge">@((context as SampleListType).Type)</span>
                    }
                </div>
            </NodeTemplate>
        </TreeViewTemplates>*@
</EjsTreeView>


@code {

    EjsTreeView<SampleListType> ComponentsTree;
    static List<SampleListType> LocalData = new List<SampleListType>();

    [CascadingParameter]
    public NavMenuComponent<object> NavMenuObj { get; set; }

    [Parameter]
    public string treeviewClass { get; set; } = "e-view time-duration sb-hide";

    public Syncfusion.EJ2.Blazor.Navigations.TreeViewFieldsSettings<object> DataSource = new Syncfusion.EJ2.Blazor.Navigations.TreeViewFieldsSettings<object>
    {
        DataSource = LocalData,
        Id = "UID",
        Text = "Name",
        Child = "SourceData",
        Expanded = "Expanded",
        IconCss = "IconCss"
    };

    private void OnNodeClick(NodeSelectEventArgs args)
    {
        if (args.NodeData.ParentID != null)
        {
            string prop = args.NodeData.Text.Replace("Preview", "").Replace("New", "").Replace("Updated", "").Trim();
            SampleBrowser.CurrentControl = SampleBrowser.Config.GetType().GetProperty(prop).GetValue(SampleBrowser.Config) as List<Sample>;
            NavMenuObj.listClass = "e-view sb-control-list-top";
            this.treeviewClass = "e-view time-duration sb-hide";
            //NavMenuObj.ListDataSource = SampleBrowser.CurrentControl;
            NavMenuObj.UpdateState();
            this.StateHasChanged();
            NavMenuObj.NavigatePage(SampleBrowser.CurrentControl[0].Url);
            JsRuntime.InvokeAsync<Object>("destroyControl", new List<string>());
            JsRuntime.InvokeAsync<Object>("viewSwitch", NavMenuObj.listClass);
        }
    }

    protected override void OnInitialized()
    {
        string previewClass = "e-badge sb-badge e-samplestatus preview tree tree-badge";
        LocalData = SampleBrowser.SampleList.GroupBy(groupBy => groupBy.Category).Select(samples =>
        {
            List<SampleList> SampleItems = samples.ToList();
            List<SampleListType> ChildItems = new List<SampleListType>();
            SampleItems.OrderBy(orderBy => orderBy.Order);
            SampleItems.ForEach(item =>
            {
                item.Samples.ForEach(currentSample =>
                {
                    SampleBrowser.SampleUrls.Add(currentSample.Url);
                });               

                ChildItems.Add(new SampleListType() { Name = item.Name, Type = item.Type, Samples = item.Samples, IconCss = item.Type == SampleType.Preview ? previewClass : string.Empty });
            });

            return new SampleListType() { SourceData = ChildItems, Name = SampleItems[0].Category, UID = samples.Key, Expanded = true };
        }).ToList<SampleListType>();
    }

    public void OnToggle()
    {
        if (this.treeviewClass.Contains("sb-hide"))
        {
            this.treeviewClass = "e-view time-duration";
            NavMenuObj.listClass = "sb-hide";
            NavMenuObj.UpdateState(); ;
            JsRuntime.InvokeAsync<Object>("viewSwitch", NavMenuObj.listClass);
        }
        //TreeviewObj.
        // TreeviewObj.UpdateToggle();
    }

    protected override void OnAfterRender(bool FirstRender)
    {
        if (FirstRender)
        {
            //string previewClass = "e-badge sb-badge e-samplestatus preview tree tree-badge";
            //LocalData = SampleBrowser.SampleList.GroupBy(groupBy => groupBy.Category).Select(samples =>
            //{
            //    List<SampleList> SampleItems = samples.ToList();
            //    List<SampleListType> ChildItems = new List<SampleListType>();
            //    SampleItems.OrderBy(orderBy => orderBy.Order);
            //    SampleItems.ForEach(item =>
            //    {
            //        ChildItems.Add(new SampleListType() { Name = item.Name, Type = item.Type, Samples = item.Samples, IconCss = item.Type == SampleType.Preview ? previewClass : string.Empty });
            //    });

            //    return new SampleListType() { SourceData = ChildItems, Name = SampleItems[0].Category, UID = samples.Key, Expanded = true };
            //}).ToList<SampleListType>();

            //string stringified = JsonConvert.SerializeObject(LocalData);
            //this.JsRuntime.InvokeAsync<object>("updateTreeview", stringified);
            //this.StateHasChanged();
        }

    }


}